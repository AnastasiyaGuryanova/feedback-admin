generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель User для NextAuth.js - хранит информацию о пользователях
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Модель Account для NextAuth.js - хранит OAuth аккаунты пользователей
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Модель Session для NextAuth.js - хранит активные сессии пользователей
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Модель VerificationToken для NextAuth.js - токены для верификации email
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Модель Feedback - основная модель для хранения отзывов от виджета
model Feedback {
  id        String   @id @default(cuid())
  projectId String   @map("project_id") // ID проекта, к которому относится отзыв
  rating    Int?     // Оценка от 1 до 5 (опционально)
  message   String   @db.Text // Текст отзыва
  url       String   // URL страницы, откуда отправлен отзыв
  userAgent String   @map("user_agent") @db.Text // User-Agent браузера пользователя
  createdAt DateTime @default(now()) @map("created_at") // Автоматически заполняется при создании

  @@index([projectId]) // Индекс для быстрого поиска по projectId
  @@index([createdAt]) // Индекс для сортировки по дате
  @@map("feedbacks")
}